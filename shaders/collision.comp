#version 460 core
layout(local_size_x = 256) in;

#define MaxParticlesPerCell 32
#define InteractionRadius 0.06
#define InteractionRadiusSq (InteractionRadius * InteractionRadius)
#define RestDistance 0.03
#define ParticleRadius 0.01
#define Gravity -2.0

#define RepulsionStrength 1.2
#define Damping 1.0        
#define NoiseStrength 1.0
#define TurbulenceStrength 1.5


struct Particle {
    vec4 position;
    vec4 velocity;
    uint gridID;
    uint padding[3];
};

layout(std430, binding = 0) buffer ParticleBuffer {
    Particle particles[];
};

struct GridCell {
    uint count;
    uint indices[MaxParticlesPerCell];
};

layout(std430, binding = 1) buffer GridBuffer {
    GridCell gridCells[];
};

uniform uint particleCount;
uniform int gridDims;
uniform vec3 simMin;
uniform vec3 simMax;
uniform float cellSize;
uniform float dt;

uint flattenIndex(ivec3 coord) {
    return uint(coord.x + coord.y * gridDims + coord.z * gridDims * gridDims);
}

bool inBounds(ivec3 coord) {
    return all(greaterThanEqual(coord, ivec3(0))) &&
           all(lessThan(coord, ivec3(gridDims)));
}

vec3 hash33(vec3 p) {
    p = fract(p * 0.1031);
    p += dot(p, p.yzx + 33.33);
    return fract((p.xxy + p.yzz) * p.zyx);
}

void main() {
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= particleCount) return;

    Particle self = particles[idx];
    vec3 pos = self.position.xyz;
    vec3 vel = self.velocity.xyz;

    // Decode grid cell
    ivec3 baseCell;
    baseCell.z = int(self.gridID) / (gridDims * gridDims);
    baseCell.y = (int(self.gridID) / gridDims) % gridDims;
    baseCell.x = int(self.gridID) % gridDims;

    vec3 totalForce = vec3(0.0);

    // 27 neighbor search
    for (int dz = -1; dz <= 1; ++dz)
    for (int dy = -1; dy <= 1; ++dy)
    for (int dx = -1; dx <= 1; ++dx) {
        ivec3 neighbor = baseCell + ivec3(dx, dy, dz);
        if (!inBounds(neighbor)) continue;

        uint flatIdx = flattenIndex(neighbor);
        GridCell cell = gridCells[flatIdx];

        for (uint i = 0; i < cell.count; ++i) {
            uint otherIdx = cell.indices[i];
            if (otherIdx == idx) continue;

            vec3 otherPos = particles[otherIdx].position.xyz;
            vec3 delta = pos - otherPos;
            float dist2 = dot(delta, delta);

            if (dist2 < InteractionRadiusSq && dist2 > 1e-6) {
                float dist = sqrt(dist2);
                vec3 dir = delta / dist;

                if (dist < RestDistance) {
                    float strength = pow((RestDistance - dist) / RestDistance, 2.0);
                    totalForce += dir * (RepulsionStrength * strength);
                }
            }
        }
    }

    // Apply repulsion
    vel += totalForce * dt;

    // Add pseudo-random energy (hash noise)
    vec3 noise = hash33(pos + float(idx)) - 0.5;
    vel += noise * NoiseStrength * dt;

    // Apply Gravity
    vel.y += (Gravity * dt);

    // Apply velocity (no damping)
    pos += vel * dt;

    // Wall collisions
    for (int i = 0; i < 3; ++i) {
        if (pos[i] < simMin[i] + ParticleRadius) {
            pos[i] = simMin[i] + ParticleRadius;
            vel[i] *= -0.9;
        }
        if (pos[i] > simMax[i] - ParticleRadius) {
            pos[i] = simMax[i] - ParticleRadius;
            vel[i] *= -0.9;
        }
    }

    particles[idx].position.xyz = pos;
    particles[idx].velocity.xyz = vel;
}
