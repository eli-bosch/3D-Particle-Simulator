#version 460 core

layout(local_size_x = 256) in;

#define MaxParticlesPerCell 32

struct Particle {
    vec4 position;
    vec4 velocity;
    uint gridID;
    int padding[3];
};

layout(std430, binding = 0) buffer ParticleBuffer {
    Particle particles[];
};

struct GridCell {
    uint count;
    uint indices[MaxParticlesPerCell];
};

layout(std430, binding = 1) buffer GridBuffer {
    GridCell gridCells[];
};

uniform float cellSize;
uniform vec3 simMin;
uniform ivec3 gridDims;
uniform uint particleCount;

uint flattenIndex(ivec3 cellCoords) {
    return uint(cellCoords.x + cellCoords.y * gridDims.x + cellCoords.z * gridDims.x * gridDims.y);
}

void main() {
    uint idx = gl_GlobalInvocationID.x;
    if(idx >= particleCount) return;

    vec3 pos = particles[idx].position.xyz;

    //Compute which cell this particle belongs to
    ivec3 cellCoords = ivec3(floor((pos - simMin) / cellSize));
    cellCoords = clamp(cellCoords, ivec3(0), gridDims - 1);

    uint gridIndex = flattenIndex(cellCoords);

    //Write grid ID back into particle
    particles[idx].gridID = gridIndex;

    uint insertIndex = atomicAdd(gridCells[gridIndex].count, 1);

    if(insertIndex < MaxParticlesPerCell) {
        gridCells[gridIndex].indices[insertIndex] = idx;
    }
}